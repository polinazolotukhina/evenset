{"ast":null,"code":"const sortNumber = (a, b) => {\n  return a - b;\n}; // both arrays have only integers\n\n\nexport const intersection = (array1, array2) => {\n  // return all the elements that are in both arrays at least once\n  // sort from lowest to highest, and do not include duplicate elements\n  const res = new Set(array1.filter(value => array2.includes(value)).sort());\n  return [...res];\n};\nexport const union = (array1, array2) => {\n  // return all the elements that are in at least one array\n  // sort from lowest to highest, and do not include duplicate elements\n  return [1];\n};\nexport const distinct = (array1, array2) => {\n  // return all the elements that are in one of the arrays\n  // but not both\n  // sort from lowest to highest, and do not include duplicate elements\n  const firstArrNumbers = array1.filter(value => !array2.includes(value));\n  const secondArrNumbers = array2.filter(value => !array1.includes(value));\n  const res = new Set(firstArrNumbers.concat(secondArrNumbers).sort());\n  return [...res];\n};","map":{"version":3,"sources":["/Users/polina/Desktop/evenset-interview/src/programming-problem/functions.js"],"names":["sortNumber","a","b","intersection","array1","array2","res","Set","filter","value","includes","sort","union","distinct","firstArrNumbers","secondArrNumbers","concat"],"mappings":"AACA,MAAMA,UAAU,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAS;AAC1B,SAAOD,CAAC,GAAGC,CAAX;AACD,CAFD,C,CAIA;;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC5C;AACA;AAEA,QAAOC,GAAG,GAAG,IAAIC,GAAJ,CAAQH,MAAM,CAACI,MAAP,CAAcC,KAAK,IAAIJ,MAAM,CAACK,QAAP,CAAgBD,KAAhB,CAAvB,EAA+CE,IAA/C,EAAR,CAAb;AACA,SAAO,CAAC,GAAGL,GAAJ,CAAP;AACH,CANM;AAQP,OAAO,MAAMM,KAAK,GAAG,CAACR,MAAD,EAASC,MAAT,KAAoB;AACrC;AACA;AACA,SAAM,CAAC,CAAD,CAAN;AACH,CAJM;AAMP,OAAO,MAAMQ,QAAQ,GAAG,CAACT,MAAD,EAASC,MAAT,KAAoB;AACxC;AACA;AACA;AACA,QAAMS,eAAe,GAAKV,MAAM,CAACI,MAAP,CAAcC,KAAK,IAAI,CAACJ,MAAM,CAACK,QAAP,CAAgBD,KAAhB,CAAxB,CAA1B;AACA,QAAMM,gBAAgB,GAAKV,MAAM,CAACG,MAAP,CAAcC,KAAK,IAAI,CAACL,MAAM,CAACM,QAAP,CAAgBD,KAAhB,CAAxB,CAA3B;AACA,QAAOH,GAAG,GAAG,IAAIC,GAAJ,CAAQO,eAAe,CAACE,MAAhB,CAAuBD,gBAAvB,EAAyCJ,IAAzC,EAAR,CAAb;AACA,SAAO,CAAC,GAAGL,GAAJ,CAAP;AACH,CARM","sourcesContent":["\nconst sortNumber = (a, b)=> {\n  return a - b;\n}\n\n// both arrays have only integers\nexport const intersection = (array1, array2) => {\n    // return all the elements that are in both arrays at least once\n    // sort from lowest to highest, and do not include duplicate elements\n\n    const  res = new Set(array1.filter(value => array2.includes(value)).sort());\n    return [...res]\n}\n\nexport const union = (array1, array2) => {\n    // return all the elements that are in at least one array\n    // sort from lowest to highest, and do not include duplicate elements\n    return[1]\n}\n\nexport const distinct = (array1, array2) => {\n    // return all the elements that are in one of the arrays\n    // but not both\n    // sort from lowest to highest, and do not include duplicate elements\n    const firstArrNumbers  =  array1.filter(value => !array2.includes(value));\n    const secondArrNumbers  =  array2.filter(value => !array1.includes(value))\n    const  res = new Set(firstArrNumbers.concat(secondArrNumbers).sort());\n    return [...res]\n}\n"]},"metadata":{},"sourceType":"module"}