{"ast":null,"code":"// both arrays have only integers\nexport const intersection = (array1, array2) => {\n  // return all the elements that are in both arrays at least once\n  // sort from lowest to highest, and do not include duplicate elements\n  return array1.filter(value => array2.includes(value)).sort();\n};\nexport const union = (array1, array2) => {\n  // return all the elements that are in at least one array\n  // sort from lowest to highest, and do not include duplicate elements\n  const firstArrNumbers = array1.filter(value => !array2.includes(value));\n  const secondArrNumbers = array2.filter(value => !array1.includes(value));\n  return firstArrNumbers.concat(secondArrNumbers).sort();\n};\nexport const distinct = (array1, array2) => {\n  // return all the elements that are in one of the arrays\n  // but not both\n  // sort from lowest to highest, and do not include duplicate elements\n  const firstArrNumbers = array1.filter(value => !array2.includes(value));\n  const secondArrNumbers = array2.filter(value => !array1.includes(value));\n  return firstArrNumbers.concat(secondArrNumbers).sort();\n};","map":{"version":3,"sources":["/Users/polina/Desktop/evenset-interview/src/programming-problem/functions.js"],"names":["intersection","array1","array2","filter","value","includes","sort","union","firstArrNumbers","secondArrNumbers","concat","distinct"],"mappings":"AACA;AACA,OAAO,MAAMA,YAAY,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC5C;AACA;AAEC,SAAOD,MAAM,CAACE,MAAP,CAAcC,KAAK,IAAIF,MAAM,CAACG,QAAP,CAAgBD,KAAhB,CAAvB,EAA+CE,IAA/C,EAAP;AACJ,CALM;AAOP,OAAO,MAAMC,KAAK,GAAG,CAACN,MAAD,EAASC,MAAT,KAAoB;AACrC;AACA;AACA,QAAMM,eAAe,GAAKP,MAAM,CAACE,MAAP,CAAcC,KAAK,IAAI,CAACF,MAAM,CAACG,QAAP,CAAgBD,KAAhB,CAAxB,CAA1B;AACA,QAAMK,gBAAgB,GAAKP,MAAM,CAACC,MAAP,CAAcC,KAAK,IAAI,CAACH,MAAM,CAACI,QAAP,CAAgBD,KAAhB,CAAxB,CAA3B;AACA,SAAOI,eAAe,CAACE,MAAhB,CAAuBD,gBAAvB,EAAyCH,IAAzC,EAAP;AACH,CANM;AAQP,OAAO,MAAMK,QAAQ,GAAG,CAACV,MAAD,EAASC,MAAT,KAAoB;AACxC;AACA;AACA;AACA,QAAMM,eAAe,GAAKP,MAAM,CAACE,MAAP,CAAcC,KAAK,IAAI,CAACF,MAAM,CAACG,QAAP,CAAgBD,KAAhB,CAAxB,CAA1B;AACA,QAAMK,gBAAgB,GAAKP,MAAM,CAACC,MAAP,CAAcC,KAAK,IAAI,CAACH,MAAM,CAACI,QAAP,CAAgBD,KAAhB,CAAxB,CAA3B;AACA,SAAOI,eAAe,CAACE,MAAhB,CAAuBD,gBAAvB,EAAyCH,IAAzC,EAAP;AACH,CAPM","sourcesContent":["\n// both arrays have only integers\nexport const intersection = (array1, array2) => {\n    // return all the elements that are in both arrays at least once\n    // sort from lowest to highest, and do not include duplicate elements\n\n     return array1.filter(value => array2.includes(value)).sort();\n}\n\nexport const union = (array1, array2) => {\n    // return all the elements that are in at least one array\n    // sort from lowest to highest, and do not include duplicate elements\n    const firstArrNumbers  =  array1.filter(value => !array2.includes(value));\n    const secondArrNumbers  =  array2.filter(value => !array1.includes(value))\n    return firstArrNumbers.concat(secondArrNumbers).sort()\n}\n\nexport const distinct = (array1, array2) => {\n    // return all the elements that are in one of the arrays\n    // but not both\n    // sort from lowest to highest, and do not include duplicate elements\n    const firstArrNumbers  =  array1.filter(value => !array2.includes(value));\n    const secondArrNumbers  =  array2.filter(value => !array1.includes(value))\n    return firstArrNumbers.concat(secondArrNumbers).sort()\n}\n"]},"metadata":{},"sourceType":"module"}